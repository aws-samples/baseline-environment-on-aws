---
AWSTemplateFormatVersion: "2010-09-09"
Description: FinTech Reference Architecture - Provides nesting for required stacks to deploy a full sample web application with reverse proxy, ELBs, IAM, and other resources (for demonstration/POC/testing)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Region Config
        Parameters:
          - pRegionAZ1Name
          - pRegionAZ2Name
      - Label:
          default: Network (existing VPC config)
        Parameters:
          - pProductionCIDR
          - pProductionVPC
          - pDMZSubnetA
          - pDMZSubnetB
          - pAppPrivateSubnetA
          - pAppPrivateSubnetB
          - pDBPrivateSubnetA
          - pDBPrivateSubnetB
      - Label:
          default: Application Configuration
        Parameters:
          - pWebInstanceType
          - pWebServerAMI
          - pAppInstanceType
          - pAppAmi
      - Label:
          default: Database Configuration
        Parameters:
          - pDBName
          - pDBUser
          - pDBPassword
          - pDBClass
          - pDBAllocatedStorage
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
        - RefArchS3URL
        - RefArchS3BucketName
        - RefArchS3KeyPrefix
  Stack:
    Value: 3
  VersionDate:
    Value: 20180420
  Identifier:
    Value: template-application
  Input:
    Description: VPC, SubnetIDs, S3 bucket names, CIDR blocks, KeyNames, AMIs, DB name and password
  Output:
    Description: Outputs ID of all deployed resources
Parameters:
  pSecurityAlarmTopic:
    Description: SNS topic for alarms and notifications
    Type: String
    Default: ''
  pEC2KeyPair:
    Description: Key Name for Instance
    Type: String
    Default: ''
  pProductionCIDR:
    Description: Production VPC CIDR
    Type: String
  pManagementCIDR:
    Description: Management VPC CIDR
    Type: String
  pProductionVPC:
    Description: Production VPC
    Type: AWS::EC2::VPC::Id
  pBastionSSHCIDR:
    Description: CIDR block (optional) of Public IPs allowed to access Bastion instance in this deployment
    Type: String
    Default: 0.0.0.0/0
  pDMZSubnetA:
    Description: DMZ Subnet A
    Type: AWS::EC2::Subnet::Id
  pDMZSubnetB:
    Description: DMZ Subnet B
    Type: AWS::EC2::Subnet::Id
  pAppPrivateSubnetA:
    Description: WebApp Subnet A
    Type: AWS::EC2::Subnet::Id
  pAppPrivateSubnetB:
    Description: WebApp Subnet A
    Type: AWS::EC2::Subnet::Id
  pWebInstanceType:
    Description: Instance type for the webservers
    Type: String
  pAppInstanceType:
    Description: Instance type for the app webservers
    Type: String
  pDBPrivateSubnetA:
    Description: rDBPrivateSubnetA
    Type: AWS::EC2::Subnet::Id
  pDBPrivateSubnetB:
    Description: rDBPrivateSubnetB
    Type: AWS::EC2::Subnet::Id
  pRegionAZ1Name:
    Description: rDBPrivateSubnetB
    Type: AWS::EC2::AvailabilityZone::Name
  pRegionAZ2Name:
    Description: rDBPrivateSubnetB
    Type: AWS::EC2::AvailabilityZone::Name
  pWebServerAMI:
    Description: Which webserver AMI do you want to use, default
    Type: String
    Default: "none"
  pAppAmi:
    Description: Which App AMI do you want to use?
    Type: String
    Default: "none"
  pDBName:
    Description: Name of RDS Database
    Type: String
  pDBUser:
    Description: Username of DB Instance
    Type: String
  pDBPassword:
    Description: Password of DB Instance
    NoEcho: true
    Type: String
  pDBClass:
    Description: Instance class of RDS instance
    Type: String
  pDBAllocatedStorage:
    Description: Allocated Storage (in GB) for RDS instance
    Type: String
  pEnvironment:
    Description: Environment type (development, test, or production)
    Type: String
    Default: "development"
  RefArchS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-).
    Default: fintech-reference-arch-resources
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Type: String
  RefArchS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.
    Default: templates/latest
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with forward slash (/) because they are automatically appended.
    Type: String
  RefArchS3URL:
    Description: Quick Start S3 URL prefix.
    Default: https://s3.amazonaws.com
    Type: String
Mappings:
  Variables:
    vELB:
      Principal: '582318560864'
Resources:
  rSSMInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  rSSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: rSSMInstanceRole
    Properties:
      Path: /
      Roles:
        - !Ref rSSMInstanceRole
  rS3ELBAccessLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
  rS3AccessLogsPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref rS3ELBAccessLogs
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Sid: ELBAccessLogs20130930
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${rS3ELBAccessLogs}/Logs/AWSLogs/${AWS::AccountId}/*
            Principal:
              AWS: !FindInMap [ Variables, vELB, Principal ]
            Action:
              - s3:PutObject
  rSecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Reverse Proxy in DMZ
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: sg-reverse-proxy-dmz
        - Key: Environment
          Value: !Ref pEnvironment
  rSecurityGroupWebInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Reverse Proxy Instances in DMZ
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref pProductionCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref pProductionCIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref pManagementCIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: !Ref pProductionCIDR
      Tags:
        - Key: Name
          Value: sg-reverse-proxy-dmz-instances
        - Key: Environment
          Value: !Ref pEnvironment
  rSecurityGroupApp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appservers ELB
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref pProductionCIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref pManagementCIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: sg-app-server-elb
        - Key: Environment
          Value: !Ref pEnvironment
  rSecurityGroupAppInstance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Appserver Instances
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref pProductionCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref pProductionCIDR
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref pManagementCIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: !Ref pProductionCIDR
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !Ref pProductionCIDR
      Tags:
        - Key: Name
          Value: sg-app-server-elb-instances
        - Key: Environment
          Value: !Ref pEnvironment
  rSecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Port 3306 database for access
      VpcId: !Ref pProductionVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref rSecurityGroupAppInstance
      Tags:
        - Key: Name
          Value: sg-database-access
        - Key: Environment
          Value: !Ref pEnvironment
  rWebContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      LifecycleConfiguration:
        Rules:
          - Id: Transition90daysRetain7yrs
            Status: Enabled
            ExpirationInDays: 2555
            Transition:
              TransitionInDays: 90
              StorageClass: GLACIER
      VersioningConfiguration:
        Status: Enabled
    DeletionPolicy: Delete
  rWebContentS3Policy:
    Type: AWS::S3::BucketPolicy
    DependsOn: rWebContentBucket
    Properties:
      Bucket: !Ref rWebContentBucket
      PolicyDocument:
        Statement:
          - Sid: EnforceSecureTransport
            Action: s3:*
            Effect: Deny
            Principal: '*'
            Resource: !Sub arn:aws:s3:::${rWebContentBucket}
            Condition:
              Bool:
                aws:SecureTransport: 'false'
          - Sid: EnforceEncryptionOnPut
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${rWebContentBucket}/*
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: AES256
  rDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: MySQL RDS Subnet Group
      SubnetIds:
        - !Ref pDBPrivateSubnetA
        - !Ref pDBPrivateSubnetB
  rRDSInstanceMySQL:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - rDBSubnetGroup
      - rSecurityGroupRDS
    Properties:
      DBName: !Ref pDBName
      Engine: MySQL
      MultiAZ: true
      StorageEncrypted: true
      MasterUsername: !Ref pDBUser
      MasterUserPassword: !Ref pDBPassword
      DBInstanceClass: !Ref pDBClass
      AllocatedStorage: !Ref pDBAllocatedStorage
      VPCSecurityGroups:
        - !Ref rSecurityGroupRDS
      DBSubnetGroupName: !Ref rDBSubnetGroup

  rALBForApp:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - rS3ELBAccessLogs
    Properties:
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref rS3ELBAccessLogs
        - Key: access_logs.s3.prefix
          Value: Logs
      Name: InternalAppALB
      Scheme: internal
      SecurityGroups:
        - !Ref rSecurityGroupApp
      Subnets:
        - !Ref pAppPrivateSubnetA
        - !Ref pAppPrivateSubnetB
      Tags:
        - Key: Name
          Value: InternalAppALB
        - Key: Environment
          Value: !Ref pEnvironment
      Type: application

  rALBTargetGroupForApp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: "/landing.html"
      HealthCheckPort: "80"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Name: AppServerTargetGroup
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: AppServerTargetGroup
        - Key: Environment
          Value: !Ref pEnvironment
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "300"
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref pProductionVPC

  rALBListerForApp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref rALBTargetGroupForApp
          Type: forward
      LoadBalancerArn: !Ref rALBForApp
      Port: 80
      Protocol: HTTP

  rALBForWeb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - rS3ELBAccessLogs
    Properties:
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "true"
        - Key: access_logs.s3.bucket
          Value: !Ref rS3ELBAccessLogs
        - Key: access_logs.s3.prefix
          Value: Logs
      Name: ProxyWebALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref rSecurityGroupWeb
      Subnets:
        - !Ref pDMZSubnetA
        - !Ref pDMZSubnetB
      Tags:
        - Key: Name
          Value: ProxyWebALB
        - Key: Environment
          Value: !Ref pEnvironment
      Type: application

  rALBTargetGroupForWeb:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/healthcheck"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: ProxyWebServerTargetGroup
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: ProxyWebServerTargetGroup
        - Key: Environment
          Value: !Ref pEnvironment
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId: !Ref pProductionVPC

  rALBListerForWeb:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref rALBTargetGroupForWeb
          Type: forward
      LoadBalancerArn: !Ref rALBForWeb
      Port: 80
      Protocol: HTTP

  rAutoScalingConfigWeb:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - rALBForWeb
      - rAutoScalingGroupApp
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              nginx: []
              java-1.6.0-openjdk-devel: []
              git: []
          files:
            /tmp/nginx/default.conf:
              content: !Sub |
                server {
                  listen 80;
                  charset utf-8;
                  location / {
                    resolver xxxxx;
                    set $elb 'https://${rALBForApp.DNSName}';
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header Host $http_host;
                    proxy_redirect off;
                    proxy_pass $elb;
                  }
                  location /healthcheck {
                    return 200 "OK";
                    add_header Content-Type text/plain;
                  }
                }
              mode: '000755'
              owner: root
              group: root
          commands:
            00-timesync-setup:
              command: |
                #!/bin/bash
                ## Use Amazon Time Sync Service
                yum -y erase ntp*
                yum -y install chrony
                service chronyd start
                chkconfig chronyd on
            01-nginx-setup:
              command: |
                #!/bin/bash
                ## Nginx setup
                sleep 5
                echo 'Replace resolver placeholder with /etc/resolv.conf nameservers'
                sed -i "s/xxxxx/$(grep ^nameserver /etc/resolv.conf | sed 's/^nameserver//' | tr -d '\n')/" /tmp/nginx/default.conf
                cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf
                service nginx stop
                sed -i '/default_server;/d' /etc/nginx/nginx.conf
                sleep 10
                service nginx restart
          services:
            sysvinit:
              nginx:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/nginx/conf.d/default.conf
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !Ref pWebServerAMI
      InstanceType: !Ref pWebInstanceType
      KeyName: !Ref pEC2KeyPair
      IamInstanceProfile: !Ref rSSMInstanceProfile
      SecurityGroups:
        - !Ref rSecurityGroupWebInstance
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash
          yum update -y
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rAutoScalingConfigWeb --region ${AWS::Region}

          ## Use Amazon Time Sync Service
          yum -y erase ntp*
          yum -y install chrony
          service chronyd start
          chkconfig chronyd on

          ## Nginx setup
          sleep 5
          cp /tmp/nginx/default.conf /etc/nginx/conf.d/default.conf
          service nginx stop
          sed -i '/default_server;/d' /etc/nginx/nginx.conf
          sleep 10
          service nginx restart
  rAutoScalingGroupWeb:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rAutoScalingConfigWeb
    Properties:
      AvailabilityZones:
        - !Ref pRegionAZ1Name
        - !Ref pRegionAZ2Name
      VPCZoneIdentifier:
        - !Ref pDMZSubnetA
        - !Ref pDMZSubnetB
      LaunchConfigurationName: !Ref rAutoScalingConfigWeb
      MinSize: 2
      MaxSize: 4
      TargetGroupARNs:
        - !Ref rALBTargetGroupForWeb
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: Web Proxy Server
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref pEnvironment
          PropagateAtLaunch: true
        - Key: Role
          Value: FRA_WebServer
          PropagateAtLaunch: true
  rAutoScalingUpWeb:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupWeb
      Cooldown: 180
      ScalingAdjustment: 2
  rAutoScalingDownWeb:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupWeb
      Cooldown: 180
      ScalingAdjustment: -2
  rCWAlarmHighCPUWeb:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 60
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
        - !Ref rAutoScalingUpWeb
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref rAutoScalingGroupWeb
      ComparisonOperator: GreaterThanThreshold
      MetricName: WebServerCpuHighUtilization
  rCWAlarmLowCPUWeb:
    Type: AWS::CloudWatch::Alarm
    DependsOn: rAutoScalingGroupWeb
    Properties:
      EvaluationPeriods: 1
      Statistic: Maximum
      Threshold: 10
      AlarmDescription: Alarm if CPU too low, remove a web server
      Period: 180
      AlarmActions:
        - !Ref rAutoScalingDownWeb
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref rAutoScalingGroupWeb
      ComparisonOperator: LessThanThreshold
      MetricName: WebServerCpuLowUtilization
  rAutoScalingConfigApp:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - rRDSInstanceMySQL
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.rAutoScalingConfigApp.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rAutoScalingGroupApp --configsets wordpress_install --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          packages:
            yum:
              php: []
              php-mysql: []
              mysql: []
              httpd: []
          sources:
            /var/www/html: https://wordpress.org/latest.tar.gz
          files:
            /var/www/html/wordpress/wp-config.php:
              content: !Sub |
                <?php
                define('DB_NAME', '${pDBName}');
                define('DB_USER', '${pDBUser}');
                define('DB_PASSWORD', '${pDBPassword}');
                define('DB_HOST', '${rRDSInstanceMySQL.Endpoint.Address}');
                define('FORCE_SSL_ADMIN', true);
                if (strpos($_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') !== false) { $_SERVER['HTTPS']='on'; }
                define('DB_CHARSET', 'utf8');
                define('DB_COLLATE', '');

                $table_prefix  = 'wp_';
                define('WP_DEBUG', false);

                if ( !defined('ABSPATH') )
                  define('ABSPATH', dirname(__FILE__) . '/');

                require_once(ABSPATH . 'wp-settings.php');
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !Ref pAppAmi
      InstanceType: !Ref pAppInstanceType
      IamInstanceProfile: !Ref rSSMInstanceProfile
      KeyName: !Ref pEC2KeyPair
      SecurityGroups:
        - !Ref rSecurityGroupAppInstance
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash -x

          yum update -y
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource rAutoScalingConfigApp --configsets wordpress_install --region ${AWS::Region}

          ## Use Amazon Time Sync Service
          yum -y erase ntp*
          yum -y install chrony
          service chronyd start
          chkconfig chronyd on

          ######################################################################
          #     NOTE: UPDATE THESE VALUES ACCORDING TO THE COMPLIANCE BODY     #
          ######################################################################
          LANDING_PAGE="/var/www/html/landing.html"
          COMPLIANCE_BODY_LABEL="FinTech Reference Architecture"
          COMPLIANCE_SURVEY_LINK="fintech"
          COMPLIANCE_MATRIX_FILENAME="Please ask to AWS staffs"
          ######################################################################

          # Download the landing page.
          sudo wget ${RefArchS3URL}/${RefArchS3BucketName}/${RefArchS3KeyPrefix}/assets/landing/landing.html -O $LANDING_PAGE

          # Replace relative image links with links to the production S3 source.
          sudo sed -i 's|images|${RefArchS3URL}/${RefArchS3BucketName}/${RefArchS3KeyPrefix}/assets/landing/images|g' $LANDING_PAGE

          # Inject the landing page branding label.
          sudo sed -i "s|{compliance-body}|$COMPLIANCE_BODY_LABEL|g" $LANDING_PAGE

          # Inject the survey link parameter.
          sudo sed -i "s|{compliance-body-survey-link}|$COMPLIANCE_SURVEY_LINK|g" $LANDING_PAGE

          # Inject the security control matrix file location.
          sudo sed -i "s|{compliance-body-matrix}|${RefArchS3URL}/${RefArchS3BucketName}/${RefArchS3KeyPrefix}/assets/$COMPLIANCE_MATRIX_FILENAME|g" $LANDING_PAGE

  rAutoScalingGroupApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: rAutoScalingConfigApp
    Properties:
      AvailabilityZones:
        - !Ref pRegionAZ1Name
        - !Ref pRegionAZ2Name
      VPCZoneIdentifier:
        - !Ref pAppPrivateSubnetA
        - !Ref pAppPrivateSubnetB
      LaunchConfigurationName: !Ref rAutoScalingConfigApp
      MinSize: 2
      MaxSize: 4
      TargetGroupARNs:
        - !Ref rALBTargetGroupForApp
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: AppServer
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref pEnvironment
          PropagateAtLaunch: true
        - Key: Role
          Value: FRA_AppServer
          PropagateAtLaunch: true
  rAutoScalingDownApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupApp
      Cooldown: 180
      ScalingAdjustment: 2
  rAutoScalingUpApp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref rAutoScalingGroupApp
      Cooldown: 180
      ScalingAdjustment: -2
  rCWAlarmHighCPUApp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Average
      Threshold: 60
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
        - !Ref rAutoScalingUpApp
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref rAutoScalingGroupApp
      ComparisonOperator: GreaterThanThreshold
      MetricName: AppServerCpuHighUtilization
  rCWAlarmLowCPUApp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      Statistic: Maximum
      Threshold: 10
      AlarmDescription: Alarm if CPU too low, remove an app server
      Period: 180
      AlarmActions:
        - !Ref rAutoScalingDownApp
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref rAutoScalingGroupApp
      ComparisonOperator: LessThanThreshold
      MetricName: AppServerCpuLowUtilization
  rPostProcInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: PostProcPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: UploadServerCertificate
                Effect: Allow
                Action:
                  - iam:ListServerCertificates
                  - iam:UploadServerCertificate
                Resource:
                  - '*'
              - Sid: CreateLoadBalancerListener
                Effect: Allow
                Action:
                  - elasticloadbalancing:CreateListener
                Resource:
                  - '*'
              - Sid: PublishNotificationTopic
                Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref pSecurityAlarmTopic
              - Sid: SelfDestruct
                Effect: Allow
                Action:
                  - ec2:TerminateInstances
                Resource:
                  - '*'
  rPostProcInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref rPostProcInstanceRole
  rPostProcInstance:
    Type: AWS::EC2::Instance
    DependsOn:
      - rAutoScalingGroupApp
      - rAutoScalingGroupWeb
    Properties:
      ImageId: !Ref pWebServerAMI
      InstanceType: !Ref pAppInstanceType
      IamInstanceProfile: !Ref rPostProcInstanceProfile
      SubnetId: !Ref pAppPrivateSubnetA
      SecurityGroupIds:
        - !Ref rSecurityGroupAppInstance
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/bash -xe

          ## Use Amazon Time Sync Service
          yum -y erase ntp*
          yum -y install chrony
          service chronyd start
          chkconfig chronyd on

          echo Configure the region, necessary especially for GovCloud
          aws configure set region ${AWS::Region}

          echo Determine whether a certificate needs to be generated
          cert_arn=$(aws iam list-server-certificates --query 'ServerCertificateMetadataList[?ServerCertificateName==`non-production-testing-server-cert`].Arn' --output text)
          if [[ $(echo "$cert_arn" | grep "non-production-testing-server-cert") != *"non-production-testing-server-cert"* ]]; then
            echo *** Beginnning ELB HTTPS configuration ***
            echo Generating private key...
            sudo openssl genrsa -out /tmp/my-private-key.pem 2048
            echo Creating CSR
            sudo openssl req -sha256 -new -key /tmp/my-private-key.pem -out /tmp/csr.pem -subj "/C=US/ST=Washington/L=Seattle/O=NonProductionTestCert/CN=NonProductionTestCert"
            echo Self-signing certificate...
            sudo openssl x509 -req -days 365 -in /tmp/csr.pem -signkey /tmp/my-private-key.pem -out /tmp/my-certificate.pem
            sudo openssl rsa -in /tmp/my-private-key.pem -outform PEM
            echo Converting private key...
            sudo openssl x509 -inform PEM -in /tmp/my-certificate.pem
            echo Uploading key to AWS IAM and saving ARN to environment variable...
            cert_arn=$(aws iam upload-server-certificate --server-certificate-name non-production-testing-server-cert --query 'ServerCertificateMetadata.Arn' --output text --certificate-body file:///tmp/my-certificate.pem --private-key file:///tmp/my-private-key.pem)
            echo Sleeping so IAM can propogate the certificate...
            sleep 10
            echo Removing key files...
            sudo rm /tmp/*.pem
          fi
          echo Creating ELB HTTPS listener using the cert stored in the environment variable...
          aws elbv2 create-listener --load-balancer-arn ${rALBForWeb} --protocol HTTPS --port 443 --default-actions "Type=forward,TargetGroupArn=${rALBTargetGroupForWeb}" --certificates "CertificateArn=$cert_arn" --region ${AWS::Region}
          aws elbv2 create-listener --load-balancer-arn ${rALBForApp} --protocol HTTPS --port 443 --default-actions "Type=forward,TargetGroupArn=${rALBTargetGroupForApp}" --certificates "CertificateArn=$cert_arn" --region ${AWS::Region}
          echo Send notification message...
          aws sns publish --topic-arn ${pSecurityAlarmTopic} \
            --subject "CloudFormation successfully launched ${AWS::StackName}" \
            --message "What now? Click here for more information: https://${rALBForWeb.DNSName}/landing.html. Please note that the application server might be finishing up its initialization. If the link doesn't respond right away, please try it again in few minutes. This page resides on an application server in your new environment." \
            --region ${AWS::Region}
          echo Sleeping for 2 minutes to allow CloudFormation to catch up
          sleep 120
          echo Self-destruct!
          aws ec2 terminate-instances --instance-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --region ${AWS::Region}
          echo *** ELB HTTPS configuration complete ***
      Tags:
        - Key: Name
          Value: PostProcessor
Outputs:
  LandingPageURL:
    Value: !Sub https://${rALBForWeb.DNSName}/landing.html
    Description: Landing Page
  WebsiteURL:
    Value: !Sub https://${rALBForWeb.DNSName}/wordpress/wp-admin/install.php
    Description: WordPress Website (demonstration purposes only)
  rSecurityGroupWeb:
    Value: !Ref rSecurityGroupWeb
  rSecurityGroupApp:
    Value: !Ref rSecurityGroupApp
  rSecurityGroupRDS:
    Value: !Ref rSecurityGroupRDS
